platform: thermostat
name: "Zone ${index}"
id: zone_${index}
sensor: hass_zone_${index}
# These aggresive times make testing easier.
# The defaults are FAR slower than this
# Can't see any real point in making it less agressive,
# the inertia of our heating system is humongous, so it's not going
# to fluctuate really.
min_idle_time: 5s
min_heating_off_time: 5s
min_heating_run_time: 5s
heat_action:
  - lambda: id(heat_req)[${index}-1] = true;
  - script.execute: update_heating_state
idle_action:
  - lambda: id(heat_req)[${index}-1] = false;
  - script.execute: update_heating_state
preset:
  - name: home
    # preset_change lamdas will overrite these settings anyway
    default_target_temperature_low: 18
  - name: eco
    # preset_change lamdas will overrite these settings anyway
    default_target_temperature_low: 17
  # Boost is used to indicate a temporary change in status
  - name: boost    
    default_target_temperature_low: 24 # I've never ever wanted it warmer than this!
    mode: 'heat'
  - name: sleep
    default_target_temperature_low: 10 # Can't set this below the min.
    #mode: 'off'
default_preset: home
on_control:
  # This is actually part of the boost / sleep logic.
  # The idea here is we want to store the setpoint and mode for the "home" peset,
  # Then when we change back to the home preset, we restore these things.
  #
  # Note that the Thermostat changes are a bit non-intuitive:
  # 1. User changes preset
  # 2. The on_control code runs
  # 3. Thermostat internally changes Climate state
  # 4. Thermostat propagates the changes through the system
  # 5. The preset_change code intercepts the state update, to change it
  # 6. New state propagates through the system
  # 7. Internal climate state is updated.
  #
  # If we restore the settings in step 5 it's too late. Hence we need to do it in step 2.
  # The issue here is the presets, which should be taken out of the themostat and simply be a control layer
  # ...but that's a lot of work to ESPHome!
  - lambda: |-
      //Handle preset adjustments separately:      
      if (x.get_preset().has_value()) {
        if(x.get_preset().value() != ClimatePreset::CLIMATE_PRESET_BOOST) {
          //If we're not boosting, store the preset, so we can potentially restore it after a boost.
          id(setpreset)[${index}-1] = x.get_preset().value();
        }

        //return now, so we don't mess with any temperature presets.
        //(In theory you clould set the preset to HOME and adjust the setpoints, in practice this doesn't happen)
        return;
      }


      auto zp = id(zone_${index}).preset;
      if(zp.has_value() && zp.value() == ClimatePreset::CLIMATE_PRESET_HOME) {
        //An adjustment is being made in 'HOME' mode... Remember it!
        if(x.get_target_temperature().has_value()) {
          ESP_LOGD("THERMOSTAT", " Saving setpoint ${index}: %.2f", x.get_target_temperature().value());
          id(setpoint)[${index}-1] = x.get_target_temperature().value();
        }
      }

      //Always save adjustements to the mode
      //(e.g. if you switch heating on in BOOST mode, remember to stay on)
      if(x.get_mode().has_value()) {
        ESP_LOGD("THERMOSTAT", " Saving mode ${index}: %d", x.get_mode().value());
        id(setmode)[${index}-1] = x.get_mode().value();
      }
preset_change:
  # At this point the internal state has been updated with the new preset, but no status update has been sent
  # Use a lambda to update the settings we care about to the stored values.
  # NB: Better to use this than on_control(), see note above:
  - lambda: |-
      auto zone = id(zone_${index});
      auto zp = zone->preset;
      if(zp.has_value()) {
        if(zp.value() != ClimatePreset::CLIMATE_PRESET_BOOST) {
          //When we exit boost, put the mode back how it was.
          zone->mode = id(setmode)[${index}-1];
          ESP_LOGD("THERMOSTAT", " Restoring setmode ${index}: %d", zone->mode);
        }

        if(zp.value() == ClimatePreset::CLIMATE_PRESET_HOME) {
          //We just changed back to home          
          zone->target_temperature = id(setpoint)[${index}-1];
          ESP_LOGD("THERMOSTAT", " Restoring setpoint ${index}: %.2f", zone->target_temperature);
        }
        if(zp.value() == ClimatePreset::CLIMATE_PRESET_ECO) {
          //We just changed back to home
          zone->target_temperature = id(setpoint)[${index}-1] + id(eco_delta).state;
          ESP_LOGD("THERMOSTAT", " Restoring (eco)setpoint ${index}: %.2f", zone->target_temperature);
        }
      }
  # Don't stay in boost mode for too long!
  # In `boost_time` minutes run the boost_timer_n script to reset us back to HOME
  - script.execute: 
      id: boost_timer_${index}
      # delay_ms is a parameter to the script 
      # [dunno why I did it this way, could have been hardcoded to this in the script]
      delay_ms: !lambda return id(boost_time).state * 60 * 1000;
      

