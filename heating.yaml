substitutions:
  name: esphome-heating-f6030c
  friendly_name: Heating Controller

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'
  on_boot:
    # Make sure we don't leave boost on:
    priority: -100.0  # Must be after sensors are done
    then:
      - script.execute: 
          id: boost_timer_1
          delay_ms: 1000
      - script.execute: 
          id: boost_timer_2
          delay_ms: 1000
      - script.execute: 
          id: boost_timer_3
          delay_ms: 1000
      - script.execute: 
          id: boost_timer_4
          delay_ms: 1000
      - script.execute: 
          id: boost_timer_5
          delay_ms: 1000
      - script.execute: 
          id: boost_timer_6
          delay_ms: 1000
      - script.execute: 
          id: boost_timer_7
          delay_ms: 1000
      - script.execute: 
          id: boost_timer_8
          delay_ms: 1000


esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
      key: !secret heating_key

# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

# In combination with the  this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
# Disabled: Seems to take up about 25% of the memory! :o
#esp32_improv:
#  authorizer: none

# Status LED
light:
  platform: status_led
  pin: GPIO23
  id: status_led_23
  internal: true

button:
  - platform: restart
    name: "${friendly_name} restart"

binary_sensor:
  - platform: status
    name: "${friendly_name} status"
    id: hass_status
    on_press:
      then:
        - light.turn_on: status_led_23
        - script.execute: update_heating_state
    on_release:
      then:
        - light.turn_off: status_led_23
        - script.execute: update_heating_state

  # Expose the relays but as sensors (i.e. read only!)
  # Note that template sensors update every loop() no matter what.
  - platform: template
    id: heating1
    name: Heating 1
    lambda: return id(relay1).state;
  - platform: template
    id: heating2
    name: Heating 2
    lambda: return id(relay2).state;
  - platform: template
    id: heating3
    name: Heating 3
    lambda: return id(relay3).state;
  - platform: template
    id: heating4
    name: Heating 4
    lambda: return id(relay4).state;
  - platform: template
    id: heating5
    name: Heating 5
    lambda: return id(relay5).state;
  - platform: template
    id: heating6
    name: Heating 6
    lambda: return id(relay6).state;
  - platform: template
    id: heating7
    name: Heating 7
    lambda: return id(relay7).state;
  - platform: template
    id: heating8
    name: Heating 8
    lambda: return id(relay8).state;


# 8 relay outputs, NOT exposed as switches in Home Assistant
switch:
  - platform: gpio
    pin: GPIO32
    id: relay1
  - platform: gpio
    pin: GPIO33
    id: relay2
  - platform: gpio
    pin: GPIO25
    id: relay3
  - platform: gpio
    pin: GPIO26
    id: relay4
  - platform: gpio
    pin: GPIO27
    id: relay5
  - platform: gpio
    pin: GPIO14
    id: relay6
  - platform: gpio
    pin: GPIO12
    id: relay7
  - platform: gpio
    pin: GPIO13
    id: relay8

  # Template switch to quickly disable everything
  - platform: template
    name: "Master Switch"
    id: master_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: update_heating_state
    on_turn_off:
      then:
        - script.execute: update_heating_state

globals:
  # BE CAREFUL: ARRAYS ARE 0 indexed! Humans use 1-indexing!
  # Worse: in C++ you'll never be warned if you run off the end of the array.

  # Transient variable to indicate that heat is required
  - id: heat_req
    type: bool[8]

  # Store the home temperature and mode
  - id: setpoint
    type: float[8]
    restore_value: true
  - id: setmode
    type: climate::ClimateMode[8]
    restore_value: true


script:
  - id: update_heating_state
    then:
      # Update the relays:
      # NTH: Might be better to only turn on/off relays if the state needs to change
      # (or might not - this way we get a force-reset effect)
      # Also this weighs in at 50ms which is 'too slow'. Seems an age, and I'm guessing it's mostly
      # logging. Making the relays respect state would make the average case much better, but perhaps 
      # it's best to leave it with constant worst-case performance?
      - lambda: |-
          int system_on = id(master_switch).state && id(hass_status).state;
          if(id(heat_req)[0] && system_on) id(relay1).turn_on(); else id(relay1).turn_off();
          if(id(heat_req)[1] && system_on) id(relay2).turn_on(); else id(relay2).turn_off();
          if(id(heat_req)[2] && system_on) id(relay3).turn_on(); else id(relay3).turn_off();
          if(id(heat_req)[3] && system_on) id(relay4).turn_on(); else id(relay4).turn_off();
          if(id(heat_req)[4] && system_on) id(relay5).turn_on(); else id(relay5).turn_off();
          if(id(heat_req)[5] && system_on) id(relay6).turn_on(); else id(relay6).turn_off();
          if(id(heat_req)[6] && system_on) id(relay7).turn_on(); else id(relay7).turn_off();
          if(id(heat_req)[7] && system_on) id(relay8).turn_on(); else id(relay8).turn_off();
  - !include { file: heating_boost_timer.yaml, vars: { index: 1 } }
  - !include { file: heating_boost_timer.yaml, vars: { index: 2 } }
  - !include { file: heating_boost_timer.yaml, vars: { index: 3 } }
  - !include { file: heating_boost_timer.yaml, vars: { index: 4 } }
  - !include { file: heating_boost_timer.yaml, vars: { index: 5 } }
  - !include { file: heating_boost_timer.yaml, vars: { index: 6 } }
  - !include { file: heating_boost_timer.yaml, vars: { index: 7 } }
  - !include { file: heating_boost_timer.yaml, vars: { index: 8 } }

sensor:
  - platform: homeassistant
    id: hass_zone_1
    entity_id: sensor.heating_zone_1
  - platform: homeassistant
    id: hass_zone_2
    entity_id: sensor.heating_zone_2
  - platform: homeassistant
    id: hass_zone_3
    entity_id: sensor.heating_zone_3
  - platform: homeassistant
    id: hass_zone_4
    entity_id: sensor.heating_zone_4
  - platform: homeassistant
    id: hass_zone_5
    entity_id: sensor.heating_zone_5
  - platform: homeassistant
    id: hass_zone_6
    entity_id: sensor.heating_zone_6
  - platform: homeassistant
    id: hass_zone_7
    entity_id: sensor.heating_zone_7
  - platform: homeassistant
    id: hass_zone_8
    entity_id: sensor.heating_zone_8


climate:
  # Use !include to make it easier to update all the settings if required.
  - !include { file: heating_thermostat.yaml, vars: { index: 1 } }
  - !include { file: heating_thermostat.yaml, vars: { index: 2 } }
  - !include { file: heating_thermostat.yaml, vars: { index: 3 } }
  - !include { file: heating_thermostat.yaml, vars: { index: 4 } }
  - !include { file: heating_thermostat.yaml, vars: { index: 5 } }
  - !include { file: heating_thermostat.yaml, vars: { index: 6 } }
  - !include { file: heating_thermostat.yaml, vars: { index: 7 } }
  - !include { file: heating_thermostat.yaml, vars: { index: 8 } }
  